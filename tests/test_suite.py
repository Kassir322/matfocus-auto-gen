"""
–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI Studio Automation
"""
import os
import multiprocessing
from core.file_handler import FileHandler
from core.multi_format_generator import MultiFormatGenerator
from config.settings import SettingsManager
from config.coordinates import get_coordinates_manager
from utils.process_manager import ProcessManager
from ui.console import ConsoleInterface
from ui.hotkeys import HotkeyManager
from utils.window_manager import WindowManager


def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("=== üìù –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞...")
        
        # –°–æ–∑–¥–∞—ë–º FileHandler
        settings_manager = SettingsManager()
        file_handler = FileHandler(settings_manager)
        print("   ‚úÖ FileHandler —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        prompts_data = file_handler.load_prompts()
        print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts_data)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        if not prompts_data:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        for card_num, pairs_list in prompts_data.items():
            print(f"   üìã –ö–∞—Ä—Ç–æ—á–∫–∞ {card_num}: {len(pairs_list)} –ø–∞—Ä")
            for i, pair in enumerate(pairs_list, 1):
                if '–ª–∏—Ü–æ' in pair and '–æ–±–æ—Ä–æ—Ç' in pair:
                    print(f"      –ü–∞—Ä–∞ {i}: ‚úì –ø–æ–ª–Ω–∞—è")
                else:
                    print(f"      –ü–∞—Ä–∞ {i}: ‚ùå –Ω–µ–ø–æ–ª–Ω–∞—è")
                    return False
        
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_cards_to_process
        cards_to_process = file_handler.get_cards_to_process()
        print(f"   üìä –ö–∞—Ä—Ç–æ—á–µ–∫ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(cards_to_process)}")
        
        print("\nüéâ –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê –ó–ê–í–ï–†–®–ï–ù!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ü–ê–†–°–ï–†–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_multi_format_generator():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è MultiFormatGenerator"""
    print("=== üé® –¢–ï–°–¢ MULTI FORMAT GENERATOR ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiFormatGenerator...")
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        settings_manager = SettingsManager()
        generator = MultiFormatGenerator(settings_manager)
        print("   ‚úÖ MultiFormatGenerator —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'check_image_generated',
            'save_image_as',
            'select_image_format',
            'generate_single_side',
            'generate_pair',
            'process_card'
        ]
        
        for method_name in required_methods:
            if hasattr(generator, method_name):
                print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                return False
        
        print("\nüéâ –¢–ï–°–¢ MULTI FORMAT GENERATOR –ó–ê–í–ï–†–®–ï–ù!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï MULTI FORMAT GENERATOR: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_full_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã MultiFormatGenerator"""
    print("=== üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        settings_manager = SettingsManager()
        generator = MultiFormatGenerator(settings_manager)
        file_handler = FileHandler(settings_manager)
        
        print("   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        prompts_data = file_handler.load_prompts()
        if not prompts_data:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return False
        
        print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(prompts_data)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI
        stop_event = multiprocessing.Event()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤
        test_card = list(prompts_data.keys())[0]
        test_pairs = prompts_data[test_card]
        
        if test_pairs:
            test_pair = test_pairs[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º generate_single_side
            try:
                # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
                import inspect
                sig = inspect.signature(generator.generate_single_side)
                print(f"   ‚úÖ generate_single_side: {sig}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã generate_single_side: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º generate_pair
            try:
                sig = inspect.signature(generator.generate_pair)
                print(f"   ‚úÖ generate_pair: {sig}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã generate_pair: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º process_card
            try:
                sig = inspect.signature(generator.process_card)
                print(f"   ‚úÖ process_card: {sig}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã process_card: {e}")
                return False
        
        print("\nüéâ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ó–ê–í–ï–†–®–ï–ù!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_incomplete_pairs():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø–∞—Ä –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("=== ‚ö†Ô∏è –¢–ï–°–¢ –ù–ï–ü–û–õ–ù–´–• –ü–ê–† ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø–∞—Ä...")
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
        test_file = 'data/test_incomplete_pairs.txt'
        test_content = """–ö–∞—Ä—Ç–æ—á–∫–∞ 1 –ª–∏—Ü–æ - –ü—Ä–æ–º–ø—Ç 1: Test front 1
–ö–∞—Ä—Ç–æ—á–∫–∞ 1 –æ–±–æ—Ä–æ—Ç - –ü—Ä–æ–º–ø—Ç 1: Test back 1
–ö–∞—Ä—Ç–æ—á–∫–∞ 1 –ª–∏—Ü–æ - –ü—Ä–æ–º–ø—Ç 2: Test front 2
# –ö–∞—Ä—Ç–æ—á–∫–∞ 1 –æ–±–æ—Ä–æ—Ç - –ü—Ä–æ–º–ø—Ç 2 –û–¢–°–£–¢–°–¢–í–£–ï–¢!
–ö–∞—Ä—Ç–æ—á–∫–∞ 2 –ª–∏—Ü–æ - –ü—Ä–æ–º–ø—Ç 1: Test front 3
–ö–∞—Ä—Ç–æ—á–∫–∞ 2 –æ–±–æ—Ä–æ—Ç - –ü—Ä–æ–º–ø—Ç 1: Test back 3"""
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        settings_manager = SettingsManager()
        original_file = settings_manager.get('PROMPTS_FILE')
        settings_manager.set('PROMPTS_FILE', test_file)
        
        try:
            file_handler = FileHandler(settings_manager)
            prompts_data = file_handler.load_prompts()
            
            print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(prompts_data)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–ø–æ–ª–Ω–∞—è –ø–∞—Ä–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞
            if 1 in prompts_data:
                pairs = prompts_data[1]
                if len(pairs) == 1:  # –î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ª–Ω–∞—è –ø–∞—Ä–∞
                    print("   ‚úÖ –ù–µ–ø–æ–ª–Ω–∞—è –ø–∞—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {len(pairs)}")
                    return False
            else:
                print("   ‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                return False
            
            print("\nüéâ –¢–ï–°–¢ –ù–ï–ü–û–õ–ù–´–• –ü–ê–† –ó–ê–í–ï–†–®–ï–ù!")
            return True
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            settings_manager.set('PROMPTS_FILE', original_file)
            if os.path.exists(test_file):
                os.remove(test_file)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ù–ï–ü–û–õ–ù–´–• –ü–ê–†: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_naming_conventions():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ —á–∞—Ç–æ–≤"""
    print("=== üìù –¢–ï–°–¢ –ò–ú–ï–ù–û–í–ê–ù–ò–Ø ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_cases = [
            {
                'card_number': 1,
                'pair_number': 1,
                'side': '–ª–∏—Ü–æ',
                'format_ratio': '4:3',
                'expected_filename': '–ö–∞—Ä—Ç–æ—á–∫–∞_1_–ª–∏—Ü–æ_–ø—Ä–æ–º–ø—Ç_1_4x3.png',
                'expected_chat': '–ö–∞—Ä—Ç–æ—á–∫–∞ 1 - –ª–∏—Ü–æ - –ü—Ä–æ–º–ø—Ç 1'
            },
            {
                'card_number': 2,
                'pair_number': 3,
                'side': '–æ–±–æ—Ä–æ—Ç',
                'format_ratio': '3:2',
                'expected_filename': '–ö–∞—Ä—Ç–æ—á–∫–∞_2_–æ–±–æ—Ä–æ—Ç_–ø—Ä–æ–º–ø—Ç_3_3x2.png',
                'expected_chat': '–ö–∞—Ä—Ç–æ—á–∫–∞ 2 - –æ–±–æ—Ä–æ—Ç - –ü—Ä–æ–º–ø—Ç 3'
            }
        ]
        
        settings_manager = SettingsManager()
        generator = MultiFormatGenerator(settings_manager)
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"   üß™ –¢–µ—Å—Ç {i}: {test_case['side']} –∫–∞—Ä—Ç–æ—á–∫–∏ {test_case['card_number']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞
            chat_name = f"–ö–∞—Ä—Ç–æ—á–∫–∞ {test_case['card_number']} - {test_case['side']} - –ü—Ä–æ–º–ø—Ç {test_case['pair_number']}"
            filename = f"–ö–∞—Ä—Ç–æ—á–∫–∞_{test_case['card_number']}_{test_case['side']}_–ø—Ä–æ–º–ø—Ç_{test_case['pair_number']}_{test_case['format_ratio'].replace(':', 'x')}.png"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            if chat_name == test_case['expected_chat']:
                print(f"      ‚úÖ –ò–º—è —á–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {chat_name}")
            else:
                print(f"      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —á–∞—Ç–∞: {chat_name}")
                return False
            
            if filename == test_case['expected_filename']:
                print(f"      ‚úÖ –ò–º—è —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {filename}")
            else:
                print(f"      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
                return False
        
        print("\nüéâ –¢–ï–°–¢ –ò–ú–ï–ù–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ò–ú–ï–ù–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_hotkeys():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö hotkeys"""
    print("=== ‚å®Ô∏è –¢–ï–°–¢ HOTKEYS ===")
    
    try:
        settings_manager = SettingsManager()
        settings_manager.load_settings()
        process_manager = ProcessManager()
        console = ConsoleInterface()
        hotkey_manager = HotkeyManager(settings_manager, process_manager, console)
        
        print("‚úì HotkeyManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        settings_methods = [
            'configure_start_card',
            'configure_generations_per_card', 
            'configure_generation_wait',
            'toggle_image_check',
            'configure_cards_limit',
            'toggle_generation_mode',
            'configure_image_wait_time'
        ]
        
        for method_name in settings_methods:
            if hasattr(settings_manager, method_name):
                print(f"‚úì –ú–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {method_name} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {method_name} –ù–ï –Ω–∞–π–¥–µ–Ω!")
                return False
        
        print("‚úì –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úì HotkeyManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ hotkeys: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_coordinates_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("=== üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coords_manager = get_coordinates_manager()
        print("   ‚úÖ CoordinatesManager –ø–æ–ª—É—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FORMAT_SELECTOR –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'FORMAT_SELECTOR' in coords_manager.coordinates:
            print("   ‚úÖ FORMAT_SELECTOR –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö")
            format_coord = coords_manager.get_coordinate('FORMAT_SELECTOR')
            print(f"   üìç FORMAT_SELECTOR: {format_coord}")
        else:
            print("   ‚ùå FORMAT_SELECTOR –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_coords = [
            'PROMPT_INPUT', 'IMAGE_LOCATION', 'NEW_CHAT_BUTTON', 
            'CHAT_NAME_INPUT', 'FORMAT_SELECTOR'
        ]
        
        missing_coords = []
        for coord in required_coords:
            if coord not in coords_manager.coordinates:
                missing_coords.append(coord)
        
        if not missing_coords:
            print("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {missing_coords}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        print("\nüìã –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
        coords_list = coords_manager.list_coordinates()
        if 'FORMAT_SELECTOR' in coords_list:
            print("   ‚úÖ FORMAT_SELECTOR –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")
        else:
            print("   ‚ùå FORMAT_SELECTOR –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")
            return False
        
        print("\nüéâ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ –ó–ê–í–ï–†–®–ï–ù!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_simple_image_wait():
    """–¢–µ—Å—Ç —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("=== ‚è∞ –¢–ï–°–¢ –£–ü–†–û–©–Å–ù–ù–û–ì–û –û–ñ–ò–î–ê–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager = SettingsManager()
        print("   ‚úÖ SettingsManager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        image_wait_time = settings_manager.get('IMAGE_WAIT_TIME')
        print(f"   üìä IMAGE_WAIT_TIME: {image_wait_time} —Å–µ–∫")
        
        if image_wait_time is None:
            print("   ‚ùå IMAGE_WAIT_TIME –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        else:
            print(f"   ‚úÖ IMAGE_WAIT_TIME –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {image_wait_time}")
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = MultiFormatGenerator(settings_manager)
        print("   ‚úÖ MultiFormatGenerator —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(generator, 'check_image_generated'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ check_image_generated –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("   ‚ùå –ú–µ—Ç–æ–¥ check_image_generated –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∞
        original_wait = settings_manager.settings['IMAGE_WAIT_TIME']
        settings_manager.settings['IMAGE_WAIT_TIME'] = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        
        try:
            result = generator.check_image_generated()
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result} (—Ç–∏–ø: {type(result)})")
            
            if isinstance(result, bool) and result == True:
                print("   ‚úÖ –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (True)")
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ú–µ—Ç–æ–¥ —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            return False
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            settings_manager.settings['IMAGE_WAIT_TIME'] = original_wait
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        if hasattr(settings_manager, 'configure_image_wait_time'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ configure_image_wait_time –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("   ‚ùå –ú–µ—Ç–æ–¥ configure_image_wait_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        
        print("\nüéâ –¢–ï–°–¢ –£–ü–†–û–©–Å–ù–ù–û–ì–û –û–ñ–ò–î–ê–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IMAGE_WAIT_TIME –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –ú–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω")
        print("   ‚úÖ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ Ctrl+8 –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –£–ü–†–û–©–Å–ù–ù–û–ì–û –û–ñ–ò–î–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_screenshot_check():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    print("=== üì∏ –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –°–ö–†–ò–ù–®–û–¢ ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager = SettingsManager()
        print("   ‚úÖ SettingsManager —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = MultiFormatGenerator(settings_manager)
        print("   ‚úÖ MultiFormatGenerator —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(generator, 'check_image_generated'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ check_image_generated –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("   ‚ùå –ú–µ—Ç–æ–¥ check_image_generated –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è UI, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            result = generator.check_image_generated()
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result} (—Ç–∏–ø: {type(result)})")
            
            if isinstance(result, bool):
                print("   ‚úÖ –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—É–ª–µ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {type(result)}")
                return False
                
        except Exception as e:
            # –û–∂–∏–¥–∞–µ–º–æ, —á—Ç–æ –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI
            print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ —É–ø–∞–ª (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ UI): {e}")
            print("   ‚úÖ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –°–ö–†–ò–ù–®–û–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç pyautogui.screenshot() –≤–º–µ—Å—Ç–æ pyautogui.pixel()")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤")
        print("   ‚úÖ Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –°–ö–†–ò–ù–®–û–¢: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_none_values_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    print("=== üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø NONE –ó–ù–ê–ß–ï–ù–ò–ô ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è None –∑–Ω–∞—á–µ–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager = SettingsManager()
        print("   ‚úÖ SettingsManager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ GENERATION_WAIT —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        generation_wait = settings_manager.get('GENERATION_WAIT')
        print(f"   üìä GENERATION_WAIT: {generation_wait}")
        
        if generation_wait is None:
            print("   ‚ùå GENERATION_WAIT –≤—Å—ë –µ—â—ë None!")
            return False
        else:
            print(f"   ‚úÖ GENERATION_WAIT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {generation_wait}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        check_enabled = settings_manager.get('CHECK_IMAGE_GENERATED')
        tolerance = settings_manager.get('BACKGROUND_COLOR_TOLERANCE')
        max_attempts = settings_manager.get('IMAGE_CHECK_ATTEMPTS')
        check_delay = settings_manager.get('IMAGE_CHECK_DELAY')
        
        print(f"   üìä CHECK_IMAGE_GENERATED: {check_enabled}")
        print(f"   üìä BACKGROUND_COLOR_TOLERANCE: {tolerance}")
        print(f"   üìä IMAGE_CHECK_ATTEMPTS: {max_attempts}")
        print(f"   üìä IMAGE_CHECK_DELAY: {check_delay}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ None
        critical_settings = {
            'GENERATION_WAIT': generation_wait,
            'CHECK_IMAGE_GENERATED': check_enabled,
            'BACKGROUND_COLOR_TOLERANCE': tolerance,
            'IMAGE_CHECK_ATTEMPTS': max_attempts,
            'IMAGE_CHECK_DELAY': check_delay
        }
        
        none_settings = []
        for key, value in critical_settings.items():
            if value is None:
                none_settings.append(key)
        
        if none_settings:
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã None –∑–Ω–∞—á–µ–Ω–∏—è: {none_settings}")
            return False
        else:
            print("   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
        generator = MultiFormatGenerator(settings_manager)
        print("   ‚úÖ MultiFormatGenerator —Å–æ–∑–¥–∞–Ω —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None")
        
        print("\nüéâ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø NONE –ó–ù–ê–ß–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ GENERATION_WAIT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç None –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø NONE –ó–ù–ê–ß–ï–ù–ò–ô: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_generation_flow():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("=== üé® –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager = SettingsManager()
        print("   ‚úÖ SettingsManager —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = MultiFormatGenerator(settings_manager)
        print("   ‚úÖ MultiFormatGenerator —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        generation_wait = settings_manager.get('GENERATION_WAIT')
        check_enabled = settings_manager.get('CHECK_IMAGE_GENERATED')
        tolerance = settings_manager.get('BACKGROUND_COLOR_TOLERANCE')
        
        print(f"   üìä GENERATION_WAIT: {generation_wait} —Å–µ–∫")
        print(f"   üìä CHECK_IMAGE_GENERATED: {check_enabled}")
        print(f"   üìä BACKGROUND_COLOR_TOLERANCE: {tolerance}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_check = [
            'check_image_generated',
            'save_image_as', 
            'select_image_format',
            'generate_single_side',
            'generate_pair',
            'process_card'
        ]
        
        for method_name in methods_to_check:
            if hasattr(generator, method_name):
                print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_event = multiprocessing.Event()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_scenarios = [
            {"check_enabled": True, "wait_time": 15, "description": "–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"},
            {"check_enabled": False, "wait_time": 20, "description": "–ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏"},
        ]
        
        for scenario in test_scenarios:
            print(f"   üß™ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['description']}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_manager.settings['CHECK_IMAGE_GENERATED'] = scenario['check_enabled']
            settings_manager.settings['GENERATION_WAIT'] = scenario['wait_time']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            actual_check = settings_manager.get('CHECK_IMAGE_GENERATED')
            actual_wait = settings_manager.get('GENERATION_WAIT')
            
            if actual_check == scenario['check_enabled'] and actual_wait == scenario['wait_time']:
                print(f"      ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"      ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å!")
                return False
        
        print("\nüéâ –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∞")
        print("   ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ê–õ–ì–û–†–ò–¢–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_window_manager():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ WindowManager —Å pygetwindow"""
    print("=== ü™ü –¢–ï–°–¢ WINDOW MANAGER ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WindowManager...")
        
        # –°–æ–∑–¥–∞—ë–º WindowManager
        window_manager = WindowManager()
        print("   ‚úÖ WindowManager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_check = [
            'find_browser_window',
            'configure_window',
            'create_automation_window',
            'setup_automation_window',
            'quick_setup_window'
        ]
        
        for method_name in methods_to_check:
            if hasattr(window_manager, method_name):
                print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        print(f"   üìä –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window_manager.window_width}x{window_manager.window_height}")
        print(f"   üìä –ü–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞: ({window_manager.window_x}, {window_manager.window_y})")
        
        print("\nüéâ –¢–ï–°–¢ WINDOW MANAGER –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pygetwindow –≤–º–µ—Å—Ç–æ pyautogui")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Chrome, Firefox, Edge")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–æ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï WINDOW MANAGER: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("=== üîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===")
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        settings_manager = SettingsManager()
        process_manager = ProcessManager()
        console = ConsoleInterface()
        hotkey_manager = HotkeyManager(settings_manager, process_manager, console)
        
        print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_manager.load_settings()
        print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        generation_mode = settings_manager.get('GENERATION_MODE')
        print(f"   üìä –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_mode}")
        
        if generation_mode == 'multi_format':
            print("   ‚úÖ –ú—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            print("   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        
        print("\nüéâ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_final_system():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("=== üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ===")
    
    try:
        print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        settings_manager = SettingsManager()
        process_manager = ProcessManager()
        console = ConsoleInterface()
        
        print("   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_manager.load_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        critical_settings = [
            'GENERATION_MODE',
            'GENERATION_WAIT',
            'IMAGE_WAIT_TIME',
            'CHECK_IMAGE_GENERATED'
        ]
        
        for setting in critical_settings:
            value = settings_manager.get(setting)
            if value is not None:
                print(f"   ‚úÖ {setting}: {value}")
            else:
                print(f"   ‚ùå {setting}: None!")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        from config.coordinates import COORDINATES
        required_coords = ['PROMPT_INPUT', 'IMAGE_LOCATION', 'NEW_CHAT_BUTTON', 'CHAT_NAME_INPUT']
        
        missing_coords = []
        for coord in required_coords:
            if COORDINATES.get(coord, (0, 0)) == (0, 0):
                missing_coords.append(coord)
        
        if missing_coords:
            print(f"   ‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {missing_coords}")
        else:
            print("   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã")
        
        print("\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù!")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –§–ò–ù–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    tests = [
        test_parser,
        test_multi_format_generator,
        test_full_cycle,
        test_incomplete_pairs,
        test_naming_conventions,
        test_hotkeys,
        test_coordinates_fix,
        test_simple_image_wait,
        test_screenshot_check,
        test_none_values_fix,
        test_generation_flow,
        test_window_manager,
        test_integration,
        test_final_system
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_func.__name__}: {e}")
            failed += 1
        print()
    
    print("=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!")
        return False


if __name__ == "__main__":
    run_all_tests()

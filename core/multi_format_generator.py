"""
–ú—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AI Studio
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ª–∏—Ü–æ 4:3 + –æ–±–æ—Ä–æ—Ç 3:2)
"""
import time
import pyautogui
import multiprocessing
from config.coordinates import COORDINATES, DELAYS, RELATIVE_MOVEMENTS
from utils.clipboard import ClipboardManager
from utils.logger import Logger
from .chat_manager import ChatManager

class MultiFormatGenerator:
    def __init__(self, settings_manager):
        self.settings_manager = settings_manager
        self.clipboard = ClipboardManager()
        self.logger = Logger()
        self.chat_manager = ChatManager()
    
    def select_image_format(self, format_ratio: str) -> bool:
        """
        –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ UI.

        Args:
            format_ratio: "4:3" –∏–ª–∏ "3:2"

        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ö–ª–∏–∫ –Ω–∞ FORMAT_SELECTOR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
        2. –ü–∞—É–∑–∞ BETWEEN_CLICKS
        3. –í–≤–æ–¥ format_ratio —á–µ—Ä–µ–∑ pyautogui.write()
        4. –ü–∞—É–∑–∞ BETWEEN_CLICKS
        5. Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        6. –ü–∞—É–∑–∞ BETWEEN_CLICKS
        """
        try:
            self.logger.log_action(f"–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {format_ratio}")
            
            # 1. –ö–ª–∏–∫ –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞
            if not self.chat_manager.click_coordinate('FORMAT_SELECTOR', "–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞"):
                return False
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # 2. –í–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞
            self.logger.log_action(f"–í–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞: {format_ratio}")
            pyautogui.write(format_ratio)
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            self.logger.log_action("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (Enter)")
            pyautogui.press('enter')
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            self.logger.log_action(f"‚úì –§–æ—Ä–º–∞—Ç {format_ratio} –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚úó –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ {format_ratio}: {e}")
            return False
    
    def check_image_generated(self):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            image_wait_time = self.settings_manager.get('IMAGE_WAIT_TIME')
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
            if image_wait_time is None:
                image_wait_time = 25.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.logger.log_action("‚ö†Ô∏è IMAGE_WAIT_TIME –±—ã–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 25.0 —Å–µ–∫")
            
            self.logger.log_action(f"‚è≥ –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–∂–∏–¥–∞–Ω–∏–µ {image_wait_time} —Å–µ–∫...")
            
            # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            for i in range(int(image_wait_time)):
                time.sleep(1)
                if i % 5 == 0 and i > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    self.logger.log_action(f"‚è≥ –ü—Ä–æ—à–ª–æ {i}/{image_wait_time} —Å–µ–∫...")
            
            self.logger.log_action("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚úó –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return True
    
    def save_image_as(self, filename):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞.
        
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        """
        try:
            self.logger.log_action(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filename}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            original_clipboard = self.clipboard.get_clipboard_content()
            self.logger.log_action("üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if not self.clipboard.copy_to_clipboard(filename):
                self.logger.log_action("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                return False
            
            self.logger.log_action(f"üìã –ò–º—è —Ñ–∞–π–ª–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä: {filename}")
            
            # –ù–∞–≤–æ–¥–∏–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º –ü–ö–ú
            x, y = COORDINATES['IMAGE_LOCATION']
            self.logger.log_action(f"üñ±Ô∏è –ö–ª–∏–∫ –ü–ö–ú –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: ({x}, {y})")
            pyautogui.rightClick(x, y)
            time.sleep(DELAYS['CONTEXT_MENU_WAIT'])
            self.logger.log_action("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—É–Ω–∫—Ç—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            rel_x, rel_y = RELATIVE_MOVEMENTS['TO_SAVE_OPTION']
            if rel_x == 0 and rel_y == 0:
                self.logger.log_action("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ TO_SAVE_OPTION –Ω–µ –∑–∞–¥–∞–Ω–æ!")
                self.clipboard.restore_clipboard(original_clipboard)
                return False
            
            self.logger.log_action(f"üñ±Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –∫ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ({rel_x}, {rel_y})")
            pyautogui.move(rel_x, rel_y)
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            self.logger.log_action("üñ±Ô∏è –ö–ª–∏–∫ –Ω–∞ –ø—É–Ω–∫—Ç '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'")
            pyautogui.click()
            time.sleep(DELAYS['SAVE_DIALOG_WAIT'])
            self.logger.log_action("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            
            # –í–≤–æ–¥–∏–º –∏–º—è —Ñ–∞–π–ª–∞
            self.logger.log_action("‚å®Ô∏è –í—Å—Ç–∞–≤–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            pyautogui.hotkey('ctrl', 'v')
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.logger.log_action("‚å®Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Enter)")
            pyautogui.press('enter')
            time.sleep(DELAYS['AFTER_SAVE'])
            self.logger.log_action("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            self.clipboard.restore_clipboard(original_clipboard)
            self.logger.log_action("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.logger.log_action(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            try:
                self.clipboard.restore_clipboard(original_clipboard)
                self.logger.log_action("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
            except:
                pass
            return False

    def generate_single_side(self, card_number: int, card_name: str, pair_number: int,
                            side: str, prompt: str,
                            format_ratio: str, stop_event) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (–ª–∏—Ü–æ –ò–õ–ò –æ–±–æ—Ä–æ—Ç).

        Args:
            card_number: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
            card_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            pair_number: –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤
            side: "–ª–∏—Ü–æ" –∏–ª–∏ "–æ–±–æ—Ä–æ—Ç"
            prompt: —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            format_ratio: "4:3" –∏–ª–∏ "3:2"
            stop_event: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ.

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
        2. –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç
        3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç: f"{card_name} - {side} - –ü—Ä–æ–º–ø—Ç {pair_number}"
        4. –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç (select_image_format)
        5. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
        6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (Ctrl+Enter)
        7. –û–∂–∏–¥–∞–Ω–∏–µ
        8. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: f"{card_name}_{side}_–ø—Ä–æ–º–ø—Ç_{pair_number}_{format_ratio.replace(':', 'x')}.png"
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–º–µ–Ω–∏ —á–∞—Ç–∞ –∏ —Ñ–∞–π–ª–∞
            chat_name = f"{card_name} - {side} - –ü—Ä–æ–º–ø—Ç {pair_number}"
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_card_name = card_name.replace(' ', '_').replace('/', '_').replace('\\', '_')
            filename = f"{safe_card_name}_{side}_–ø—Ä–æ–º–ø—Ç_{pair_number}_{format_ratio.replace(':', 'x')}.png"
            
            self.logger.log_action(f"--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {chat_name} ---")
            
            # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            if not self.chat_manager.create_new_chat_only():
                return False
            
            if stop_event.is_set():
                return False
            
            # 2. –í–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
            if not self.chat_manager.click_coordinate('PROMPT_INPUT', "–ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"):
                return False
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            self.logger.log_action("–í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            if not self.clipboard.safe_paste_text(prompt):
                return False
            time.sleep(DELAYS['AFTER_PASTE'])
            
            # 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —á–∞—Ç
            if not self.chat_manager.rename_current_chat(chat_name):
                return False
            
            # 4. –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not self.select_image_format(format_ratio):
                return False
            
            # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
            if not self.chat_manager.click_coordinate('PROMPT_INPUT', "–≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"):
                return False
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            self.logger.log_action("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (Ctrl+Enter)")
            pyautogui.hotkey('ctrl', 'enter')
            time.sleep(DELAYS['BETWEEN_CLICKS'])
            
            # 7. –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            generation_wait = self.settings_manager.get('GENERATION_WAIT')
            check_image_enabled = self.settings_manager.get('CHECK_IMAGE_GENERATED')
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
            if generation_wait is None:
                generation_wait = 20.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.logger.log_action("‚ö†Ô∏è GENERATION_WAIT –±—ã–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20.0 —Å–µ–∫")
            
            if check_image_enabled is None:
                check_image_enabled = True  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.logger.log_action("‚ö†Ô∏è CHECK_IMAGE_GENERATED –±—ã–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: True")
            
            self.logger.log_action(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏... –û–∂–∏–¥–∞–Ω–∏–µ {generation_wait} —Å–µ–∫...")
            
            if check_image_enabled:
                # –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.logger.log_action("üîç –†–µ–∂–∏–º —É–º–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
                # –°–Ω–∞—á–∞–ª–∞ –∂–¥—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                initial_wait = min(5, generation_wait // 2)
                self.logger.log_action(f"‚è≥ –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {initial_wait} —Å–µ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                
                for i in range(int(initial_wait)):
                    if stop_event.is_set():
                        return False
                    time.sleep(1)
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
                max_attempts = self.settings_manager.get('IMAGE_CHECK_ATTEMPTS')
                check_delay = self.settings_manager.get('IMAGE_CHECK_DELAY')
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
                if max_attempts is None:
                    max_attempts = 3
                    self.logger.log_action("‚ö†Ô∏è IMAGE_CHECK_ATTEMPTS –±—ã–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3")
                
                if check_delay is None:
                    check_delay = 5
                    self.logger.log_action("‚ö†Ô∏è IMAGE_CHECK_DELAY –±—ã–ª None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 —Å–µ–∫")
                
                for attempt in range(max_attempts):
                    if stop_event.is_set():
                        return False
                    
                    self.logger.log_action(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                    
                    if self.check_image_generated():
                        self.logger.log_action("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é.")
                        break
                    
                    if attempt < max_attempts - 1:
                        self.logger.log_action(f"‚è≥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â—ë –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –ñ–¥—ë–º {check_delay} —Å–µ–∫...")
                        for i in range(int(check_delay)):
                            if stop_event.is_set():
                                return False
                            time.sleep(1)
                    else:
                        self.logger.log_action("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.logger.log_action(f"‚è≥ –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {generation_wait} —Å–µ–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)...")
                
                for i in range(int(generation_wait)):
                    if stop_event.is_set():
                        return False
                    time.sleep(1)
                    if i % 5 == 0 and i > 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        self.logger.log_action(f"‚è≥ –ü—Ä–æ—à–ª–æ {i}/{generation_wait} —Å–µ–∫...")
                
                self.logger.log_action("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é")
            
            # 9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not self.save_image_as(filename):
                return False
            
            self.logger.log_action(f"‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {chat_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚úó –û–®–ò–ë–ö–ê –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {chat_name}: {e}")
            return False

    def generate_pair(self, card_number: int, card_name: str, pair_number: int,
                     prompts_dict: dict, stop_event) -> int:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã (–ª–∏—Ü–æ + –æ–±–æ—Ä–æ—Ç).

        Args:
            card_number: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
            card_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            pair_number: –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
            prompts_dict: {'–ª–∏—Ü–æ': '—Ç–µ–∫—Å—Ç', '–æ–±–æ—Ä–æ—Ç': '—Ç–µ–∫—Å—Ç'}
            stop_event: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (0, 1 –∏–ª–∏ 2)

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (4:3)
        2. –ü–∞—É–∑–∞ BETWEEN_GENERATIONS
        3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (3:2)
        """
        try:
            self.logger.log_action(f"======= üîó –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–ê–†–´ {pair_number} –ö–ê–†–¢–û–ß–ö–ò {card_number} =======")
            
            success_count = 0
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (4:3)
            self.logger.log_action(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Ä—ã {pair_number}")
            if self.generate_single_side(card_number, card_name, pair_number, '–ª–∏—Ü–æ', 
                                       prompts_dict['–ª–∏—Ü–æ'], '4:3', stop_event):
                success_count += 1
            
            if stop_event.is_set():
                return success_count
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if success_count > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                self.logger.log_action("–ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –ø–∞—Ä—ã")
                time.sleep(DELAYS['BETWEEN_GENERATIONS'])
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (3:2)
            self.logger.log_action(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Ä—ã {pair_number}")
            if self.generate_single_side(card_number, card_name, pair_number, '–æ–±–æ—Ä–æ—Ç', 
                                       prompts_dict['–æ–±–æ—Ä–æ—Ç'], '3:2', stop_event):
                success_count += 1
            
            self.logger.log_action(f"‚úì –ü–∞—Ä–∞ {pair_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return success_count
            
        except Exception as e:
            self.logger.log_action(f"‚úó –û–®–ò–ë–ö–ê –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã {pair_number}: {e}")
            return 0

    def process_card(self, card_number: int, card_name: str, pairs_list: list,
                    stop_event) -> tuple:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

        Args:
            card_number: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
            card_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            pairs_list: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
            stop_event: —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

        Returns:
            tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        - –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –≤ pairs_list
        - –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤—ã–∑–æ–≤ generate_pair()
        - –ü–∞—É–∑–∞ BETWEEN_CARDS –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä—ã
        """
        try:
            self.logger.log_action(f"======= üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–†–¢–û–ß–ö–ò #{card_number} =======")
            
            processed_pairs = 0
            total_images = 0
            
            for pair_index, pair_dict in enumerate(pairs_list, 1):
                if stop_event.is_set():
                    break
                
                self.logger.log_action(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã {pair_index} –∏–∑ {len(pairs_list)}")
                
                images_created = self.generate_pair(card_number, card_name, pair_index, pair_dict, stop_event)
                if images_created > 0:
                    processed_pairs += 1
                    total_images += images_created
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                if pair_index < len(pairs_list) and not stop_event.is_set():
                    self.logger.log_action("–ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏")
                    time.sleep(DELAYS['BETWEEN_GENERATIONS'])
            
            self.logger.log_action(f"‚úì –ö–∞—Ä—Ç–æ—á–∫–∞ #{card_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_pairs}/{len(pairs_list)} –ø–∞—Ä, {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return processed_pairs, total_images
            
        except Exception as e:
            self.logger.log_action(f"‚úó –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ #{card_number}: {e}")
            return 0, 0

    def automation_worker(self, stop_event, start_card: int,
                         check_image_enabled: bool,
                         generation_wait: float,
                         cards_to_process: int):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Process).

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π FileHandler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        —Å –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤.
        """
        # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from core.file_handler import FileHandler
        
        self.logger.log_action(f"üöÄ –ü—Ä–æ—Ü–µ—Å—Å –º—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω (PID: {multiprocessing.current_process().pid})")
        self.logger.log_action(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Å—Ç–∞—Ä—Ç={start_card}, –ª–∏–º–∏—Ç={cards_to_process}, –ø—Ä–æ–≤–µ—Ä–∫–∞={check_image_enabled}")
        self.logger.log_action(f"üéØ –†–µ–∂–∏–º: –ú—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π (–ª–∏—Ü–æ 4:3 + –æ–±–æ—Ä–æ—Ç 3:2)")
        
        file_handler = FileHandler(self.settings_manager)
        cards_to_process_list = file_handler.get_cards_to_process()
        
        print(f"[–ì–ï–ù–ï–†–ê–¢–û–†] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards_to_process_list)}")
        for i, (card_num, card_name, pairs_list) in enumerate(cards_to_process_list):
            print(f"[–ì–ï–ù–ï–†–ê–¢–û–†] –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1}: –Ω–æ–º–µ—Ä={card_num} ({card_name}), –ø–∞—Ä={len(pairs_list)}")
        
        if not cards_to_process_list:
            self.logger.log_action(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å ‚Ññ{start_card}!")
            return
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        total_pairs = sum(len(pairs_list) for _, _, pairs_list in cards_to_process_list)
        total_images = total_pairs * 2  # –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ = 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        self.logger.log_action(f"üìç –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–∞—Ä—Ç–æ—á–∫–∏ #{start_card}")
        self.logger.log_action(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cards_to_process_list)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        self.logger.log_action(f"üîó –ù–∞–π–¥–µ–Ω–æ {total_pairs} –ø–∞—Ä –ø—Ä–æ–º–ø—Ç–æ–≤")
        self.logger.log_action(f"üñºÔ∏è –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        processed_cards = 0
        processed_pairs = 0
        total_images_created = 0
        
        for card_number, card_name, pairs_list in cards_to_process_list:
            if stop_event.is_set():
                self.logger.log_action("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            
            pairs_done, images_created = self.process_card(card_number, card_name, pairs_list, stop_event)
            if pairs_done > 0:
                processed_cards += 1
                processed_pairs += pairs_done
                total_images_created += images_created
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if (card_number, pairs_list) != cards_to_process_list[-1] and not stop_event.is_set():
                time.sleep(DELAYS['BETWEEN_CARDS'])
        
        self.logger.log_action(f"========== üìã –û–¢–ß–Å–¢ ==========")
        self.logger.log_action(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {processed_cards}/{len(cards_to_process_list)}")
        self.logger.log_action(f"üîó –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {processed_pairs}/{total_pairs}")
        self.logger.log_action(f"üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images_created}/{total_images}")
        self.logger.log_action(f"===========================")

"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""
import time
import pyautogui
import subprocess
import os
import pygetwindow as gw
from utils.logger import Logger

class WindowManager:
    def __init__(self):
        self.logger = Logger()
        self.window_title = "AI Studio Automation Window"
        self.window_width = 1200
        self.window_height = 1000
        self.window_x = 0
        self.window_y = 0
    
    def create_automation_window(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
        –°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –ø–æ–∑–∏—Ü–∏–µ–π.
        """
        try:
            self.logger.log_action("ü™ü –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–æ–≤
            browsers = self._find_available_browsers()
            
            if not browsers:
                self.logger.log_action("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤!")
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            browser_path = browsers[0]
            browser_name = os.path.basename(browser_path)
            
            self.logger.log_action(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä: {browser_name}")
            
            # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if "chrome" in browser_name.lower():
                success = self._create_chrome_window()
            elif "firefox" in browser_name.lower():
                success = self._create_firefox_window()
            elif "edge" in browser_name.lower():
                success = self._create_edge_window()
            else:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                success = self._create_generic_window(browser_path)
            
            if success:
                self.logger.log_action("‚úÖ –†–∞–±–æ—á–µ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                self.logger.log_action("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –æ–∫–Ω–æ")
                return False
                
        except Exception as e:
            self.logger.log_action(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞: {e}")
            return False
    
    def _find_available_browsers(self):
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        browsers = []
        
        # –ü—É—Ç–∏ –∫ –±—Ä–∞—É–∑–µ—Ä–∞–º (Windows)
        browser_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files\Mozilla Firefox\firefox.exe",
            r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe",
            r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe",
            r"C:\Program Files\Microsoft\Edge\Application\msedge.exe"
        ]
        
        for path in browser_paths:
            if os.path.exists(path):
                browsers.append(path)
        
        return browsers
    
    def _create_chrome_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ Chrome —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Chrome
            chrome_args = [
                "--new-window",
                "--window-size=1200,1000",
                "--window-position=0,0",
                "--disable-web-security",
                "--disable-features=VizDisplayCompositor",
                "about:blank"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
            subprocess.Popen([
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                *chrome_args
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            time.sleep(3)  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            return self._verify_window_created()
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Chrome –æ–∫–Ω–∞: {e}")
            return False
    
    def _create_firefox_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ Firefox —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Firefox
            firefox_args = [
                "-new-window",
                "-width", "1200",
                "-height", "1000",
                "about:blank"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Firefox
            subprocess.Popen([
                r"C:\Program Files\Mozilla Firefox\firefox.exe",
                *firefox_args
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            time.sleep(3)  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            return self._verify_window_created()
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Firefox –æ–∫–Ω–∞: {e}")
            return False
    
    def _create_edge_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ Edge —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Edge
            edge_args = [
                "--new-window",
                "--window-size=1200,1000",
                "--window-position=0,0",
                "about:blank"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Edge
            subprocess.Popen([
                r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe",
                *edge_args
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            time.sleep(3)  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            return self._verify_window_created()
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Edge –æ–∫–Ω–∞: {e}")
            return False
    
    def _create_generic_window(self, browser_path):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            subprocess.Popen([
                browser_path,
                "--new-window",
                "about:blank"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            time.sleep(3)  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            return self._verify_window_created()
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def _verify_window_created(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–ª–æ—Å—å"""
        try:
            # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è, –∑–Ω–∞—á–∏—Ç –æ–∫–Ω–æ –µ—Å—Ç—å
            current_pos = pyautogui.position()
            pyautogui.moveTo(current_pos.x + 1, current_pos.y + 1)
            pyautogui.moveTo(current_pos.x, current_pos.y)
            
            self.logger.log_action("‚úÖ –û–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–Ω–∞: {e}")
            return False
    
    def find_browser_window(self):
        """
        –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω.
        """
        try:
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –æ–∫–æ–Ω –±—Ä–∞—É–∑–µ—Ä–æ–≤
            browser_titles = [
                'Google Chrome',
                'Mozilla Firefox', 
                'Microsoft Edge',
                'Chrome',
                'Firefox',
                'Edge'
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞
            all_windows = gw.getAllWindows()
            
            # –ò—â–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            for window in all_windows:
                if window.title and any(browser in window.title for browser in browser_titles):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ –Ω–µ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                    if not window.isMinimized:
                        self.logger.log_action(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞: {window.title}")
                        return window
            
            self.logger.log_action("‚ùå –û–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return None
    
    def configure_window(self, window):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
        """
        try:
            self.logger.log_action("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
            window.activate()
            time.sleep(0.5)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 1200x1000
            window.resizeTo(self.window_width, self.window_height)
            time.sleep(0.5)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é (0,0)
            window.moveTo(self.window_x, self.window_y)
            time.sleep(0.5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_size = window.size
            current_pos = window.topleft
            
            self.logger.log_action(f"‚úÖ –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —Ä–∞–∑–º–µ—Ä {current_size}, –ø–æ–∑–∏—Ü–∏—è {current_pos}")
            return True
            
        except Exception as e:
            self.logger.log_action(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫–Ω–∞: {e}")
            return False
    
    def setup_automation_window(self):
        """
        –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫–Ω–∞: –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
        """
        try:
            self.logger.log_action("ü™ü === –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–ë–û–ß–ï–ì–û –û–ö–ù–ê ===")
            
            # –®–∞–≥ 1: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_window = self.find_browser_window()
            
            if browser_window:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
                if self.configure_window(browser_window):
                    self.logger.log_action("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                    return True
                else:
                    self.logger.log_action("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ...")
            
            # –®–∞–≥ 2: –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
            self.logger.log_action("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
            if self.create_automation_window():
                # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(3)
                
                # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ
                browser_window = self.find_browser_window()
                if browser_window:
                    if self.configure_window(browser_window):
                        self.logger.log_action("‚úÖ –ù–æ–≤–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                        return True
                    else:
                        self.logger.log_action("‚ö†Ô∏è –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
                        return False
                else:
                    self.logger.log_action("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ")
                    return False
            else:
                self.logger.log_action("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ")
                return False
                
        except Exception as e:
            self.logger.log_action(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫–Ω–∞: {e}")
            return False
    
    def quick_setup_window(self):
        """
        –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Ctrl+Shift+V.
        """
        try:
            self.logger.log_action("‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            browser_window = self.find_browser_window()
            if browser_window:
                if self.configure_window(browser_window):
                    self.logger.log_action("‚úÖ –û–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –±—ã—Å—Ç—Ä–æ!")
                    return True
                else:
                    self.logger.log_action("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫–Ω–æ")
                    return False
            else:
                self.logger.log_action("‚ùå –û–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Shift+S –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
                return False
                
        except Exception as e:
            self.logger.log_action(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫–Ω–∞: {e}")
            return False


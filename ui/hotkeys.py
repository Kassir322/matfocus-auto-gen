"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
"""
import keyboard
import pyautogui
import os
import signal
from config.coordinates import get_coordinates_manager

class HotkeyManager:
    def __init__(self, settings_manager, process_manager, console):
        self.settings_manager = settings_manager
        self.process_manager = process_manager
        self.console = console
        self.coordinates_manager = get_coordinates_manager()
        self.coordinate_capture_mode = False
        self.coordinate_to_set = None
        self.should_exit = False  # –§–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    
    def get_mouse_position(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—É—Ä—Å–æ—Ä–∞"""
        x, y = pyautogui.position()
        
        if self.coordinate_capture_mode and self.coordinate_to_set:
            # –†–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            self.coordinates_manager.update_coordinate(self.coordinate_to_set, x, y)
            self.coordinate_capture_mode = False
            self.coordinate_to_set = None
            print(f"‚úì –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            print(f"[–ö–û–û–†–î–ò–ù–ê–¢–´] –ö—É—Ä—Å–æ—Ä: X={x}, Y={y}")
    
    def show_coordinates_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        print("-" * 60)
        print("–ú–ï–ù–Æ –ù–ê–°–¢–†–û–ô–ö–ò –ö–û–û–†–î–ò–ù–ê–¢")
        print("-" * 60)
        print(self.coordinates_manager.list_coordinates())
        print("-" * 60)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        all_coords = list(self.coordinates_manager.coordinates.keys()) + list(self.coordinates_manager.relative_movements.keys())
        
        # –û–ø–∏—Å–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
        coord_descriptions = {
            'PROMPT_INPUT': '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞',
            'IMAGE_LOCATION': '–ú–µ—Å—Ç–æ –∫–ª–∏–∫–∞ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'NEW_CHAT_BUTTON': '–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞',
            'CHAT_NAME_INPUT': '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞',
            'CHAT_NAME_POPUP': '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –ø–æ–ø–∞–ø–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)',
            'CHAT_NAME_CONFIRM': '–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ø–æ–ø–∞–ø–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)',
            'FORMAT_SELECTOR': '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –º—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞!)',
            'PROMPT_INPUT_AFTER_IMAGE': '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏!)',
            'TO_SAVE_OPTION': '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –ø—É–Ω–∫—Ç—É "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"'
        }
        
        for i, coord_name in enumerate(all_coords, 1):
            description = coord_descriptions.get(coord_name, '')
            status = "‚ö†Ô∏è –Ω–µ –∑–∞–¥–∞–Ω–∞" if self.coordinates_manager.get_coordinate(coord_name) == (0, 0) else "‚úì –∑–∞–¥–∞–Ω–∞"
            
            if coord_name == 'FORMAT_SELECTOR':
                print(f"  {i}. {coord_name} - {description} [{status}] ‚≠ê")
            elif coord_name == 'PROMPT_INPUT_AFTER_IMAGE':
                print(f"  {i}. {coord_name} - {description} [{status}] ‚≠ê")
            else:
                print(f"  {i}. {coord_name} - {description} [{status}]")
        
        print("  0. –û—Ç–º–µ–Ω–∞")
        print("-" * 60)
        
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ").strip()
            if not choice or choice == '0':
                print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            choice = int(choice)
            if 1 <= choice <= len(all_coords):
                coord_name = all_coords[choice - 1]
                description = coord_descriptions.get(coord_name, '')
                
                print(f"\n–í—ã–±—Ä–∞–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞: {coord_name}")
                print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                
                if coord_name == 'FORMAT_SELECTOR':
                    print("‚≠ê –í–ê–ñ–ù–û: –≠—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞!")
                    print("   –ù–∞–π–¥–∏—Ç–µ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –ø—Ä–æ–º–ø—Ç–∞)")
                elif coord_name == 'PROMPT_INPUT_AFTER_IMAGE':
                    print("‚≠ê –í–ê–ñ–ù–û: –≠—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏!")
                    print("   –ù–∞–π–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∫–ª–∏–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –ü–û–°–õ–ï –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞")
                    print("   (–æ–±—ã—á–Ω–æ —á—É—Ç—å –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ —á–∞—Ç —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
                
                print("–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+Shift+P")
                self.coordinate_capture_mode = True
                self.coordinate_to_set = coord_name
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        except KeyboardInterrupt:
            print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    def kill_console(self):
        """–£–±–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å (—ç–º—É–ª—è—Ü–∏—è Ctrl+C)"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGINT —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        # –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç KeyboardInterrupt, –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
        os.kill(os.getpid(), signal.SIGINT)
    
    def exit_program(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞ (Esc)")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if self.process_manager.automation_process and self.process_manager.automation_process.is_alive():
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            self.process_manager.stop_automation()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        # –û–∂–∏–¥–∞–Ω–∏–µ Enter –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
        self.should_exit = True
    
    def register_hotkeys(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        keyboard.add_hotkey('ctrl+shift+p', self.get_mouse_position)
        keyboard.add_hotkey('ctrl+0', self.show_coordinates_menu)  # –ù–æ–≤–∞—è –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞
        keyboard.add_hotkey('ctrl+1', self.settings_manager.configure_start_card)
        keyboard.add_hotkey('ctrl+2', self.settings_manager.configure_generations_per_card)
        keyboard.add_hotkey('ctrl+3', self.settings_manager.configure_generation_wait)
        keyboard.add_hotkey('ctrl+4', self.settings_manager.toggle_image_check)
        keyboard.add_hotkey('ctrl+5', lambda: self.console.show_current_settings(self.settings_manager))
        keyboard.add_hotkey('ctrl+6', self.settings_manager.configure_end_card)
        keyboard.add_hotkey('ctrl+7', self.settings_manager.change_generation_mode)
        keyboard.add_hotkey('ctrl+8', self.settings_manager.configure_image_wait_time)
        keyboard.add_hotkey('ctrl+shift+v', self.process_manager.setup_window)
        keyboard.add_hotkey('ctrl+shift+s', lambda: self.process_manager.start_automation(self.settings_manager))
        keyboard.add_hotkey('ctrl+shift+q', self.process_manager.stop_automation)
        keyboard.add_hotkey('ctrl+esc', self.kill_console)  # –£–±–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å (–∞–Ω–∞–ª–æ–≥ Ctrl+C)
        keyboard.add_hotkey('esc', self.exit_program)